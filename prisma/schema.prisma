generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String            @id
  username            String            @unique
  avatar              String?
  cover               String?
  name                String?
  surname             String?
  description         String?
  city                String?
  school              String?
  work                String?
  website             String?
  createdAt           DateTime          @default(now())
  Post                Post[]
  Comment             Comment[]
  Like                Like[]
  Follower            Follower[]        @relation("UserFollowers")
  Following           Follower[]        @relation("UserFollowings")
  FollowerRequestSent FollowerRequest[] @relation("FollowRequestSent")
  FollowerRequest     FollowerRequest[] @relation("FollowRequestReceived")
  Blocks              Block[]           @relation("BlocksSent")
  BlocksBy            Block[]           @relation("BlocksReceived")
  Story               Story[]
}

model Post {
  id        Int       @unique @default(autoincrement())
  desc      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Like[]
  Comment   Comment[]
}

model Comment {
  id        Int      @unique @default(autoincrement())
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  likes     Like[]
}

model Like {
  id        Int      @unique @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?
}

model Follower {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
}

model FollowerRequest {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  sender     User     @relation("FollowRequestSent", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiver   User     @relation("FollowRequestReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String

  @@unique([senderId, receiverId])
}

model Block {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  blocker   User     @relation("BlocksSent", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String
  blocked   User     @relation("BlocksReceived", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String
}

model Story {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  img       String
}
